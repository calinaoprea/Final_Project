A1
2. Write a shell script which takes as parameters two names of text files. The script will compare 
the two text files line by line and display the first 3 text lines that differ. 
#!/bin/bash

# Check if correct number of arguments provided
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 file1 file2"
    exit 1
fi

file1="$1"
file2="$2"

# Check if files exist
if [ ! -e "$file1" ] || [ ! -e "$file2" ]; then
    echo "Error: One or both files do not exist."
    exit 1
fi

# Compare files line by line until the end of either file or 3 differences are found
line_num=1
count=0
while IFS= read -r line1 && IFS= read -r line2 <&3; do
    if [ "$line1" != "$line2" ]; then
        echo "Line $line_num:"
        echo "$file1: $line1"
        echo "$file2: $line2"
        count=$((count+1))
        if [ "$count" -eq 3 ]; then
            break
        fi
    fi
    line_num=$((line_num+1))
done < "$file1" 3< "$file2"

# Display message based on number of differences found
if [ "$count" -eq 0 ]; then
    echo "No differences found."
elif [ "$count" -eq 1 ]; then
    echo "Only one difference found."
elif [ "$count" -eq 2 ]; then
    echo "Only two differences found."
fi
 
4. Write a shell script that reads numbers from keyboard (the reading stops when the user has 
entered the number 0). The script will display the sum of numbers entered from the keyboard. 
#!/bin/sh

echo "Enter the numbers"
suma=0

while true;
do
    read x
    if [ "$x" -eq 0 ];
    then
        break
    fi
    suma=$((suma+x))
done

echo "Suma: $suma"

 
8. Write a shell script which takes as parameters two file names (a file that contains user names 
and a file that contains any text). The script will send a mail to each user in the first file (the 
mail message will be the text in the second file). 
#!/bin/bash

if [ ! -f $1 ] && [ ! -f $2 ] 
then echo "One or both files doesn't exist"
exit 1
fi

IFS=""
while read line
do
 
  echo $(<"$2") | mail -s "Mail sent through command line" "$line"
  echo "mail sent to $line" 
  IFS=""
done < $1


 
12. Write a shell script which takes as parameter a directory name. The script will display the 
filename and the first 3 lines of each ASCII text file found in that directory. 
#!/bin/bash

if [ $# -ne 1 ]; then
    echo "no directory selected"
    exit 1
fi

directory="$1"

if [ ! -d "$directory" ]; then
    echo "the directory was not found"
    exit 1
fi

for file in "$directory"/*; do
    if [ -f "$file" ] ; then
        echo "file: $file"
        head -n 3 "$file"
        echo
    fi
done
 
14. Write a shell script which displays all files in the current directory and its subdirectories that 
have write permission for the group of which the owner belongs.

check_permission() {
    file="$1"
    if [ -w "$file" ]; then
        echo "$file"
    fi
}

traverse_dir() {
    directory="$1"
    for item in "$directory"/*; do
        if [ -d "$item" ]; then
            traverse_dir "$item"
        elif [ -f "$item" ]; then
            check_permission "$item"
        fi
    done
}
traverse_dir "$(pwd)"
 
A2
s5. Write a shell script which takes as parameters several file names. The script will delete all 
words that contain at least one digit from all given files.
#!/bin/bash

for file in "$@"; do
    if [[ -f "$file" ]]; then
        sed -i -E 's/\b\w*[0-9]\w*\b//g' "$file"
        echo "Processed $file: Removed words containing digits."
    else
        echo "Error: File $file not found."
    fi
done

s6. Write a shell script which takes as parameters a lowercase letter followed by several file names. 
The script will replace any special character with the given letter in all files given as parameters. 
#!/bin/bash

# first arg is letter -> validate lowercase
letter=$1 

# == for exact string comparison, =~ for pattern matching with regular expr
if ! [[ $letter =~ [a-z] ]];then
	echo "The first argument should be a lowercase letter!"	
fi

for file in "${@:2}"; do
	# check if the files exist  -f
	if [ ! -f "$file" ]; then
		echo "File $file not found!"
	fi

	# replace all that are not a-z, A-Z, or digits  /g globally
	# -i to use file in-place
	sed -i "s/[^a-zA-Z0-9]/$letter/g" "$file"
done

s9. Write a shell script which takes as parameters several file names. The script will delete the 2nd 
and 4th word in each line of the given files. The words shall contain only letters or numbers and 
shall be separated by spaces. 
#!/bin/bash

if [ "$#" -eq 0 ]; then
    echo "Please input file names when using the script."
    exit 1
fi

for file in "$@"; do
    if [[ ! -f "$file" ]]; then
        echo "File '$file' does not exist."
        continue
    fi

    sed -i -E 's/^(([^[:space:]]+[[:space:]]+){1})([^[:space:]]+[[:space:]]+)(([^[:space:]]+[[:space:]]+){1})([^[:space:]]+[[:space:]]*)(.*)$/\1\4\7/' "$file"
    echo "Processed $file: Removed 2nd and 4th words."
done
s10. Write a shell script which takes as parameters several file names. The script will interchange the 1st word with 3rd word in each line of the given files. The words shall contain only letters or numbers and shall be separated by any other character.
#!/bin/bash

# first we need to check if all arguments provided to program are valid
# file paths
for argument in $*
do
if !(test -r $argument)
then
echo "Argument $argument is not a valid file path"
exit 1
fi
done


# if all the arguments represent valid file paths, we iterate them again
# in each iteration we change the first word with the third one
# i chose this aproach because I wanted to be sure that the script does its job on all files, therefore the output will be consistent. Either all files are changed, or none

# I split the regular expression in 4 groups, the first is the separators from the beginning, the second is the first word, the third is composed by separators + word + separators and
#the last group is the third word.
for file in $*
do
sed 's/^\([^A-Za-z0-9]*\)\([A-Za-z0-9]\+\)\([^A-Za-z0-9]*[A-Za-z0-9]\+[^A-Za-z0-9]*\)\([A-Za-z0-9]\+\)/\1\4\3\2/' $file >  "$file modified"
done
g12. Write a shell script which takes as parameters a file name followed by several directory names. 
The script will delete all files whose names are given in the file received as first parameter in 
the given directories and their subdirectories. 
#!/bin/bash

if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <file_with_filenames> <directory1> [<directory2> ...]"
    exit 1
fi

file_with_filenames="$1"
shift

if [[ ! -f "$file_with_filenames" ]]; then
    echo "File '$file_with_filenames' does not exist."
    exit 1
fi

for dir in "$@"; do
    if [[ ! -d "$dir" ]]; then
        echo "Directory '$dir' does not exist."
        continue
    fi

    while IFS= read -r filename; do
        find "$dir" -type f -name "$filename" -exec rm -f {} \; -exec echo "Deleted: {}" \;
    done < "$file_with_filenames"
done

g15. Write a shell script which takes as parameters several file names. The script will display all the 
lines in the given files that contain only lowercase letters. 
#!/bin/bash

if [ $# -eq 0 ];
then
   echo "Usage: $0 file1 [file2 ...]"
   exit 1
fi

for file in "$@"; do
    grep -v '[[:upper:]]' "$file"
done

A3
3. Write a shell script which takes as parameters several file names. The script will display the ratio of the number of lowercase letters to the number of uppercase letters in each given file (ex: file1.txt l/U = 95/12).
#!/bin/bash

# Handle the case when no file is provided
if [ "$#" -eq 0 ]; then
    echo "Please enter at least one file."
    exit 1
fi

# Iterate through each file provided as argument
for file in "$@"; do
    # Check if the file exists
    if [ ! -f "$file" ]; then
        echo "$file does not exist."
        continue
    fi

    awk '
         BEGIN {lower = 0; upper = 0}
         {
       	# $0 - current line
          for ( i = 1; i <= length($0); i++) {
		char = substr($0, i , 1) # saving each character
		if(char ~ /[a-z]/) lower++; #check if char is L/U case
		if(char ~ /[A-Z]/) upper++;
	  }
	}
	END {ratio = (lower "/" upper)
	print FILENAME " l/U = " ratio }' $file
done
6. Write a shell script which takes as parameters several file names. For each given file, the script will display its name and the average number of words per line. At the end, the script will display also the average number of words per file.
#!/bin/bash

if [ "$#" -eq 0 ]; then
    echo "Usage: $0 <file1> [<file2> ...]"
    exit 1
fi

total_files=0
total_words=0

for file in "$@"; do
    if [[ ! -f "$file" ]]; then
        echo "File '$file' does not exist."
        continue
    fi

    total_files=$((total_files + 1))
    
    awk '
    {
        total_words += NF
        total_lines++
    }
    END {
        if (total_lines > 0) {
            avg_words_per_line = total_words / total_lines
            print "File: " FILENAME ", Average words per line: " avg_words_per_line
        } else {
            print "File: " FILENAME " is empty"
        }
    }' "$file"

    file_words=$(awk '{ total += NF } END { print total }' "$file")
    total_words=$((total_words + file_words))
done

if [ "$total_files" -gt 0 ]; then
    avg_words_per_file=$(echo "$total_words / $total_files" | bc -l)
    echo "Average words per file: $avg_words_per_file"
else
    echo "No valid files provided."
fi

11. Write a shell script which takes as parameters several file names. The script will display the name of file which contains the highest number of words and the word count.
#!/bin/bash

if [ "$#" -eq 0 ]; then
    echo "Usage: $0 <file1> [<file2> ...]"
    exit 1
fi

max_word_count=0
file_with_max_words=""

for file in "$@"; do
    if [[ ! -f "$file" ]]; then
        echo "File '$file' does not exist."
        continue
    fi

    word_count=$(awk '{ total += NF } END { print total }' "$file")

    if (( word_count > max_word_count )); then
        max_word_count=$word_count
        file_with_max_words=$file
    fi
done

if [ -n "$file_with_max_words" ]; then
    echo "File with the highest number of words: $file_with_max_words"
    echo "Word count: $max_word_count"
else
    echo "No valid files provided."
Fi

12. Write a shell script which takes as parameters two words followed by several file names. The script will replace any occurrence of the first word with the second word in each line of the given files.
#!/bin/bash

# Check if directory exists
if [ -d "$1" ]; then
    for file in $(find "$1" -type d); do
        echo "Directory: $file"
    done
    # List all files in directory and its subdirectories
    for file in $(find "$1" -type f); do
        echo "File: $file"
        # Print the maximum number of repeating lines
        sort "$file" | uniq -c | sort -nr | head -n 1
    done

else
    echo "Directory does not exist."
fi
14. Write a shell script which takes as parameter a time interval (hh:mm-hh:mm). The script will display the average number of users that were connected to the server in the given time interval.
#!/bin/bash

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <time_interval>"
    echo "Example: $0 14:00-15:00"
    exit 1
fi

time_interval="$1"

# Extract the start and end times from the time interval
start_time=$(echo "$time_interval" | cut -d'-' -f1)
end_time=$(echo "$time_interval" | cut -d'-' -f2)

# Convert start and end times to minutes since midnight for easier comparison
start_minutes=$((10#$(echo "$start_time" | cut -d':' -f1) * 60 + 10#$(echo "$start_time" | cut -d':' -f2)))
end_minutes=$((10#$(echo "$end_time" | cut -d':' -f1) * 60 + 10#$(echo "$end_time" | cut -d':' -f2)))

# Temporary file to store users information
tempfile=$(mktemp)

# Collect `who` command output
who > "$tempfile"

# Use awk to calculate the average number of users within the time interval
average_users=$(awk -v start="$start_minutes" -v end="$end_minutes" '
BEGIN {
    count = 0;
    total_users = 0;
}
{
    # Extract the time part from the `who` output and convert to minutes
    time = $4;
    hour = substr(time, 1, 2);
    min = substr(time, 4, 2);
    time_in_minutes = hour * 60 + min;

    # Check if the time is within the specified interval
    if (time_in_minutes >= start && time_in_minutes <= end) {
        total_users++;
    }
    count++;
}
END {
    if (count > 0) {
        average = total_users / count;
        print average;
    } else {
        print "No data available in the specified time interval.";
    }
}
' "$tempfile")

echo "Average number of users between $start_time and $end_time: $average_users"

# Clean up
rm "$tempfile"

A4
4. Given a list of filenames and a directory name, write a Shell script that prints for each file all the subdirectories in which it appears. Print these subdirectories sorted in decreasing order of the creation date and time.  
#!/bin/bash

# directory name argument
dir_name=$1

# shifting to get to the other arguments which are all file names
shift
file_names=$@

for file_name in $file_names
do
    echo "File: $file_name"
    find $dir_name -name $file_name -exec dirname {} \; | while read line
    do
        ls -lt -- "$line" | awk -v file="$file_name" '$9 == file {printf "%s %s %s %s\n", $6, $7, $8, $line}'
    done | while read month day time dir
    do
        date=$(date -d"$month $day $time" +%s)
        echo $date $dir
    done | sort -nr | while read timestamp dir
    do
        date=$(date -d@$timestamp +"%b %d %T")
        echo $date $dir
    done
done
11. Given a list of files and a directory, print for each filename all the subdirectories in which it appears, ordered decreasingly by the file size (a file can have the same name but different sizes in different subdirectories).
#!/bin/bash

if [ $# -eq 0 ]; then
    echo "Error: No parameters provided."
    exit 1
fi

directory="${@: -1}"

if [ ! -d "$directory" ]; then
        echo "Error: No directory provided."
        exit 1
fi


echo directory

for ((param=1;param<$#;param++));
 do

        if ! find ~/ -name "${!param}" -quit 2>/dev/null; then
    echo "Error: ${!param} does not exist."
    exit 1

	else 
        directories=$(find "$directory" -name "${!param}" -exec du -h {} +)

         # Sort directories based on file size (the size is the first column in the output of 'du -h')
         sorted_directories=$(echo "$directories" | sort -rh)
        # Output sorted directories
        echo "$sorted_directories"
         fi
done

12. Write a Shell program that, given a directory (as a parameter), creates a list of all the names that appear in it and its subdirectories (files, directories), and for each file it prints the maximum number of repeating lines (in the same file).  
#!/bin/bash

# Check if directory exists
if [ -d "$1" ]; then
    for file in $(find "$1" -type d); do
        echo "Directory: $file"
    done
    # List all files in directory and its subdirectories
    for file in $(find "$1" -type f); do
        echo "File: $file"
        # Print the maximum number of repeating lines
        sort "$file" | uniq -c | sort -nr | head -n 1
    done

else
    echo "Directory does not exist."
fi
16. Write a Shell program that received as parameters two directory names and will copy the branch specified by the second directory to be a subbranch in the first directory, but it will copy only .txt files. 
#!/bin/bash

if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <target_directory> <source_directory>"
    exit 1
fi

target_directory="$1"
source_directory="$2"

if [[ ! -d "$target_directory" ]]; then
    echo "Target directory '$target_directory' does not exist."
    exit 1
fi

if [[ ! -d "$source_directory" ]]; then
    echo "Source directory '$source_directory' does not exist."
    exit 1
fi

# Create the subdirectory in the target directory
subbranch="${target_directory}/$(basename "$source_directory")"
mkdir -p "$subbranch"

# Find and copy .txt files
find "$source_directory" -type f -name "*.txt" | while read -r file; do
    # Get the relative path of the file
    relative_path="${file#$source_directory/}"
    # Create the directory structure in the target directory
    mkdir -p "$subbranch/$(dirname "$relative_path")"
    # Copy the file
    cp "$file" "$subbranch/$relative_path"
done

echo "Copied all .txt files from '$source_directory' to '$subbranch'."

A5
1. Write a C Program that receives a command line argument a filename, and prints to standard output the content of this text file, printing also an empty line after each line of text. Make no assumption regarding the maximum length of a line. 
#include <stdio.h>
#include <stdlib.h>

void print_file_with_empty_lines(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    size_t len = 0;
    char *line = NULL;
    while (getline(&line, &len, file) != -1) {
        // Print the line
        printf("%s", line);
        // Print an empty line
        printf("\n");
    }

    free(line);
    fclose(file);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    print_file_with_empty_lines(argv[1]);

    return 0;
}

5. Write a C Program that receives as command line arguments two words and the name of a file. The program will print at stdout the content of the file, replacing the occurrences of the first word with the second.  
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to replace a substring with another substring in a string
char *replace_word(const char *str, const char *old_word, const char *new_word) {
    char *result;
    int i, count = 0;
    int new_word_len = strlen(new_word);
    int old_word_len = strlen(old_word);

    // Counting the number of times old word occurs in the string
    for (i = 0; str[i] != '\0'; i++) {
        if (strstr(&str[i], old_word) == &str[i]) {
            count++;
            i += old_word_len - 1;
        }
    }

    // Allocating space for the new string
    result = (char *)malloc(i + count * (new_word_len - old_word_len) + 1);
    if (result == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    i = 0;
    while (*str) {
        // Compare the substring with the result
        if (strstr(str, old_word) == str) {
            strcpy(&result[i], new_word);
            i += new_word_len;
            str += old_word_len;
        } else {
            result[i++] = *str++;
        }
    }
    result[i] = '\0';
    return result;
}

void replace_and_print_file_content(const char *filename, const char *old_word, const char *new_word) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    size_t len = 0;
    char *line = NULL;
    while (getline(&line, &len, file) != -1) {
        char *modified_line = replace_word(line, old_word, new_word);
        printf("%s", modified_line);
        free(modified_line);
    }

    free(line);
    fclose(file);
}

int main(int argc, char *argv[]) {
    if (argc != 4) {
        fprintf(stderr, "Usage: %s <old_word> <new_word> <filename>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *old_word = argv[1];
    const char *new_word = argv[2];
    const char *filename = argv[3];

    replace_and_print_file_content(filename, old_word, new_word);

    return 0;
}
10. Write a C Program that receives as command line argument a name of a file. The program prints at stdout the content of this file, erasing all empty lines from the file. Make no assumptions regarding the maximum length of a line.
#include <stdio.h>
#include <stdlib.h>

void print_file_without_empty_lines(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    size_t len = 0;
    ssize_t read;
    char *line = NULL;
    while ((read = getline(&line, &len, file)) != -1) {
        // Check if the line is not empty (i.e., it contains more than just a newline character)
        if (read > 1 || (read == 1 && line[0] != '\n')) {
            printf("%s", line);
        }
    }

    free(line);
    fclose(file);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *filename = argv[1];
    print_file_without_empty_lines(filename);

    return 0;
}
13. Write a C Program that receives as command line arguments a name of a file and several words. The program will print at stdout the content of the file, deleting the occurrences of all words provided as arguments.   
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to check if a word should be deleted
int is_word_to_delete(const char *word, char *words[], int word_count) {
    for (int i = 0; i < word_count; i++) {
        if (strcmp(word, words[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

// Function to process each line and delete specified words
void process_line(char *line, char *words[], int word_count) {
    char *token;
    char *delimiters = " \t\n";
    token = strtok(line, delimiters);

    while (token != NULL) {
        if (!is_word_to_delete(token, words, word_count)) {
            printf("%s ", token);
        }
        token = strtok(NULL, delimiters);
    }
    printf("\n");
}

// Function to read the file and process its content
void process_file(const char *filename, char *words[], int word_count) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    size_t len = 0;
    char *line = NULL;
    while (getline(&line, &len, file) != -1) {
        process_line(line, words, word_count);
    }

    free(line);
    fclose(file);
}

int main(int argc, char *argv[]) {
    if (argc < 3) {
        fprintf(stderr, "Usage: %s <filename> <word1> <word2> ... <wordN>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *filename = argv[1];
    char **words = &argv[2];
    int word_count = argc - 2;

    process_file(filename, words, word_count);

    return 0;
}
A6
3. We have a file that contains N integer numbers. Using two types of processes (one for determining the minimum and the other to determine the maximum value from an array), write a program that determines the kth element in increasing order of the integer array, without sorting the array.
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

void find_min(int *array, int size, int pipe_fd[2]) {
    close(pipe_fd[0]);
    int min = array[0];
    for (int i = 1; i < size; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    write(pipe_fd[1], &min, sizeof(int));
    close(pipe_fd[1]);
    exit(0);
}

void find_max(int *array, int size, int pipe_fd[2]) {
    close(pipe_fd[0]);
    int max = array[0];
    for (int i = 1; i < size; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    write(pipe_fd[1], &max, sizeof(int));
    close(pipe_fd[1]);
    exit(0);
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <filename> <k>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *filename = argv[1];
    int k = atoi(argv[2]);

    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    int *array = NULL;
    int size = 0;
    int capacity = 10;
    array = (int *)malloc(capacity * sizeof(int));
    if (array == NULL) {
        perror("Error allocating memory");
        exit(EXIT_FAILURE);
    }

    while (fscanf(file, "%d", &array[size]) != EOF) {
        size++;
        if (size >= capacity) {
            capacity *= 2;
            array = (int *)realloc(array, capacity * sizeof(int));
            if (array == NULL) {
                perror("Error reallocating memory");
                exit(EXIT_FAILURE);
            }
        }
    }
    fclose(file);

    if (k < 1 || k > size) {
        fprintf(stderr, "Error: k should be between 1 and %d\n", size);
        exit(EXIT_FAILURE);
    }

    int result = 0;
    for (int i = 0; i < k; i++) {
        int min_fd[2], max_fd[2];
        if (pipe(min_fd) == -1 || pipe(max_fd) == -1) {
            perror("Error creating pipe");
            exit(EXIT_FAILURE);
        }

        pid_t min_pid = fork();
        if (min_pid == -1) {
            perror("Error forking min process");
            exit(EXIT_FAILURE);
        }

        if (min_pid == 0) {
            find_min(array, size, min_fd);
        }

        pid_t max_pid = fork();
        if (max_pid == -1) {
            perror("Error forking max process");
            exit(EXIT_FAILURE);
        }

        if (max_pid == 0) {
            find_max(array, size, max_fd);
        }

        close(min_fd[1]);
        close(max_fd[1]);

        int min_val, max_val;
        read(min_fd[0], &min_val, sizeof(int));
        read(max_fd[0], &max_val, sizeof(int));
        close(min_fd[0]);
        close(max_fd[0]);

        wait(NULL);
        wait(NULL);

        if (i == k - 1) {
            result = min_val;
        }

        int *new_array = (int *)malloc(size * sizeof(int));
        int new_size = 0;
        for (int j = 0; j < size; j++) {
            if (array[j] != min_val) {
                new_array[new_size++] = array[j];
            }
        }

        free(array);
        array = new_array;
        size = new_size;
    }

    printf("The %d-th element in increasing order is %d\n", k, result);
    free(array);

    return 0;
}
9. An array of numbers is given x1, x2, ..., xn. Compute the partial sums x1, x1+x2, x1+x2+x3, ..., x1+x2+...+xn, using a separate process for each partial sum.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/mman.h>
#define N 5

int main() {

    int x[N] = {1, 2, 3, 4, 5};
   
    int *S = mmap(NULL, N * sizeof(int), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    if (S == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }
    pid_t pids[N];

    void compute_partial_sum(int i) {
        int sum = 0;
        for (int j = 0; j <= i; j++) {
            sum += x[j];
        }
        S[i] = sum;
    }

    for (int i = 0; i < N; i++) {
        pids[i] = fork();
        if (pids[i] < 0) {
            perror("fork");
            exit(1);
        } else if (pids[i] == 0) {
            compute_partial_sum(i);
	    munmap(S, N * sizeof(int));
            exit(0);
        }
    }

    for (int i = 0; i < N; i++) {
        waitpid(pids[i], NULL, 0);
    }

    printf("Partial sums: ");
    for (int i = 0; i < N; i++) {
        printf("%d ", S[i]);
    }
    printf("\n");
   munmap(S, N * sizeof(int));
    return 0;
}
10. An array of letters is given. Using a separate process for each vowel, delete all vowels from the array.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#define ARRAY_SIZE 10

char* delete_vowel(char array[], char vowel) {
    int i, j;
    char *result = (char *)malloc(ARRAY_SIZE * sizeof(char));
    for (i = 0, j = 0; array[i] != '\0'; i++) {
        if (array[i] != vowel) {
            result[j++] = array[i];
        }
    }
    result[j] = '\0';
    return result;
}

int main() {
    char array[ARRAY_SIZE] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};
    char vowels[] = {'a', 'e', 'i', 'o', 'u'};
    int num_vowels = sizeof(vowels) / sizeof(vowels[0]);

    // Create separate processes for each vowel deletion
    for (int i = 0; i < num_vowels; i++) {
        pid_t pid = fork();
        if (pid == 0) {
            // Child process
            char *result = delete_vowel(array, vowels[i]);
            printf("Process for vowel '%c' completed. Array: %s\n", vowels[i], result);
            strcpy(array, result); // Assign the modified array back to the original array
            free(result); // Free the memory allocated for the result
            exit(0);
        } else if (pid < 0) {
            // Error handling
            perror("fork");
            exit(1);
        }
    }

    // Parent process waits for all child processes to finish
    for (int i = 0; i < num_vowels; i++) {
        wait(NULL);
    }

    return 0;
}
13. Calculate the product of an array n of numbers using divide et impera method: a process splits the array in two sub-arrays and gives them to two other child processes to compute their product, then multiplies the results obtained from the two. The two child processes apply the same technique (split, etc…).
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int arrayProduct(int arr[], int start, int end) {
    if (start == end) {
        // cand nu are decat unelement arrrayu
        return arr[start];
    } else {
        int mid = (start + end) / 2;

        int leftChild = fork();

        if (leftChild == 0) {
            int leftProduct = arrayProduct(arr, start, mid);
            _exit(leftProduct); // dai exit cu valorea produsului
        } else if (leftChild > 0) {
            // in parinte
            int rightChild = fork();
            if (rightChild == 0) {
                int rightProduct = arrayProduct(arr, mid + 1, end);
                _exit(rightProduct); 
            } else if (rightChild < 0) {
                perror("fork");
                return -1;
            }

            int leftProduct, rightProduct;
            waitpid(leftChild, &leftProduct, 0);
            waitpid(rightChild, &rightProduct, 0);

            return WEXITSTATUS(leftProduct) * WEXITSTATUS(rightProduct);
        } else {
            perror("fork");
            return -1;
        }
    }
}

int main() {
    int arr[] = {1, 2, 3,5};

    int n = sizeof(arr) / sizeof(arr[0]);

    int product = arrayProduct(arr, 0, n - 1);

    printf("Product of the array: %d\n", product);

    return 0;
}
